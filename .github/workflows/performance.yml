name: Performance Monitoring

on:
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM
  workflow_dispatch:
  push:
    branches: [main, 'feature/*']
    paths:
      - 'src/**'
      - 'package.json'
      - 'vite.config.ts'

jobs:
  performance-budget:
    name: Performance Budget Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Create Lighthouse CI config
        run: |
          cat > lighthouserc.js << 'EOF'
          module.exports = {
            ci: {
              collect: {
                url: ['http://localhost:4173'],
                startServerCommand: 'npm run preview',
                numberOfRuns: 3,
              },
              assert: {
                assertions: {
                  'categories:performance': ['error', {minScore: 0.9}],
                  'categories:accessibility': ['error', {minScore: 0.9}],
                  'categories:best-practices': ['error', {minScore: 0.9}],
                  'categories:seo': ['error', {minScore: 0.9}],
                  'first-contentful-paint': ['error', {maxNumericValue: 1800}],
                  'largest-contentful-paint': ['error', {maxNumericValue: 2500}],
                  'cumulative-layout-shift': ['error', {maxNumericValue: 0.1}],
                  'total-blocking-time': ['error', {maxNumericValue: 200}],
                },
              },
              upload: {
                target: 'temporary-public-storage',
              },
            },
          };
          EOF

      - name: Run Lighthouse CI
        run: lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Comment PR with performance results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Read Lighthouse results
            const resultsPath = path.join(process.cwd(), '.lighthouseci');
            if (fs.existsSync(resultsPath)) {
              const results = fs.readdirSync(resultsPath)
                .filter(file => file.endsWith('.json'))
                .map(file => JSON.parse(fs.readFileSync(path.join(resultsPath, file), 'utf8')));
              
              if (results.length > 0) {
                const result = results[0];
                const perf = result.categories.performance.score * 100;
                const a11y = result.categories.accessibility.score * 100;
                const bp = result.categories['best-practices'].score * 100;
                const seo = result.categories.seo.score * 100;
                
                const comment = `## üöÄ Performance Report
                
                | Metric | Score | Status |
                |--------|-------|--------|
                | Performance | ${perf.toFixed(1)}% | ${perf >= 90 ? '‚úÖ' : '‚ùå'} |
                | Accessibility | ${a11y.toFixed(1)}% | ${a11y >= 90 ? '‚úÖ' : '‚ùå'} |
                | Best Practices | ${bp.toFixed(1)}% | ${bp >= 90 ? '‚úÖ' : '‚ùå'} |
                | SEO | ${seo.toFixed(1)}% | ${seo >= 90 ? '‚úÖ' : '‚ùå'} |
                
                ### Core Web Vitals
                - **LCP**: ${result.audits['largest-contentful-paint'].displayValue}
                - **FCP**: ${result.audits['first-contentful-paint'].displayValue}
                - **CLS**: ${result.audits['cumulative-layout-shift'].displayValue}
                - **TBT**: ${result.audits['total-blocking-time'].displayValue}
                `;
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            }

  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Analyze bundle size
        run: |
          echo "## Bundle Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size | Gzipped |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|---------|" >> $GITHUB_STEP_SUMMARY

          find dist -name "*.js" -o -name "*.css" | while read file; do
            size=$(du -h "$file" | cut -f1)
            gzip_size=$(gzip -c "$file" | wc -c | awk '{print $1/1024 "KB"}')
            echo "| $file | $size | $gzip_size |" >> $GITHUB_STEP_SUMMARY
          done

      - name: Check bundle size budget
        run: |
          # Set size limits (in KB)
          JS_LIMIT=500
          CSS_LIMIT=100
          TOTAL_LIMIT=600

          js_size=$(find dist -name "*.js" -exec du -k {} + | awk '{sum+=$1} END {print sum}')
          css_size=$(find dist -name "*.css" -exec du -k {} + | awk '{sum+=$1} END {print sum}')
          total_size=$((js_size + css_size))

          echo "Bundle sizes:"
          echo "JS: ${js_size}KB (limit: ${JS_LIMIT}KB)"
          echo "CSS: ${css_size}KB (limit: ${CSS_LIMIT}KB)"
          echo "Total: ${total_size}KB (limit: ${TOTAL_LIMIT}KB)"

          if [ $js_size -gt $JS_LIMIT ] || [ $css_size -gt $CSS_LIMIT ] || [ $total_size -gt $TOTAL_LIMIT ]; then                                                                                                       
            echo "‚ùå Bundle size exceeds budget!"
            exit 1
          else
            echo "‚úÖ Bundle size within budget!"
          fi
